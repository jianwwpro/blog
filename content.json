[{"title":"sql删除重复数据","date":"2019-04-09T03:17:20.000Z","path":"2019/04/09/sql删除重复数据/","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445 select * from crm_customer WHERE id in (select id from chongfu)AND id NOT IN ( select id from chongfumin) order by phone_no;update crm_customer set del_flag=1WHERE id in (select id from chongfu)AND id NOT IN ( select id from chongfumin) order by phone_no;insert into chongfumin select * from crm_customer where id in ( SELECT min(id) FROM crm_customer GROUP BY phone_no HAVING count(phone_no) &gt; 1);insert into chongfuselect * from crm_customer where phone_No in SELECT phone_no FROM chongfu GROUP BY phone_no HAVING count(phone_no) &gt; 1","tags":[]},{"title":"以太坊-gas计算","date":"2018-10-19T07:27:31.000Z","path":"2018/10/19/以太坊-gas计算/","text":"ETH佣金GasGas由两个部分组成： Gas limit 和 Gas price– Gas Price 是 Gwei 的数量，是指用户愿意花费于每个 Gas 单位的价钱。– Gas Limit 是用户愿意为执行某个操作或确认交易支付的最大Gas量（最少21,000），不同时期、不同的操作默认值不同，在执行操作时可设置Gas Limit。 11000000000 gwei = 1 ETH 一次交易有如下基本信息： 12345678910111213141516SENDER ADDRESS0x4ee99D2A10E45F1c354F564d12089FecB367ee88TO CONTRACT ADDRESS0x273DE63287659453733FBFf192075123babb32aAVALUE0.00 ETHGAS USED29999GAS PRICE10000000000000GAS LIMIT90000MINED IN BLOCK322TX DATA0xcc9ab2674a6f736500000000000000000000000000000000000000000000000000000000 实际Gas USED 为2999，Gas 的价格为10000000000000(故意设置很高)，所以换算: 1210000000000000 / 1000000000 = 10000 gwei10000gwei * 29999 / 1000000000 = 0.29999 eth 一次交易的手续费为：0.29999eth， 非常高的手续费","tags":[{"name":"区块链","slug":"区块链","permalink":"http://jianwwpro.github.io/tags/区块链/"},{"name":"以太坊","slug":"以太坊","permalink":"http://jianwwpro.github.io/tags/以太坊/"},{"name":"gas","slug":"gas","permalink":"http://jianwwpro.github.io/tags/gas/"}]},{"title":"docker相关","date":"2018-10-19T02:58:56.000Z","path":"2018/10/19/docker相关/","text":"php-cgi -b 127.0.0.1:9000docker start php-appdocker exec -it php-app /bin/bashdocker run –name=”php-app” -h “php-app” -p 40001:40001 -v /data/docker/phpapp/:/data/ -it e934aafc2206 docker run -d -name centos7 –privileged=true centos:7 /usr/sbin/initdocker ps –no-truncdocker run -it –privileged –name=”mysql-client” -h “mysql-client” -p 4003:4003 -v /data/docker/mysqlclient:/data/ -it e934aafc2206 /usr/sbin/init","tags":[{"name":"docker","slug":"docker","permalink":"http://jianwwpro.github.io/tags/docker/"}]},{"title":"MYSQL数据表分区","date":"2018-05-11T02:51:35.000Z","path":"2018/05/11/MYSQL数据表分区/","text":"MySQL表的四种分区类型一、什么是表分区通俗地讲表分区是将一大表，根据条件分割成若干个小表。mysql5.1开始支持数据表分区了。 如：某用户表的记录超过了600万条，那么就可以根据入库日期将表分区，也可以根据所在地将表分区。当然也可根据其他的条件分区。 二、为什么要对表进行分区为了改善大型表以及具有各种访问模式的表的可伸缩性，可管理性和提高数据库效率。 分区的一些优点包括： 与单个磁盘或文件系统分区相比，可以存储更多的数据。对于那些已经失去保存意义的数据，通常可以通过删除与那些数据有关的分区，很容易地删除那些数据。相反地，在某些情况下，添加新数据的过程又可以通过为那些新数据专门增加一个新的分区，来很方便地实现。通常和分区有关的其他优点包括下面列出的这些。MySQL分区中的这些功能目前还没有实现，但是在我们的优先级列表中，具有高的优先级；我们希望在5.1的生产版本中，能包括这些功能。一些查询可以得到极大的优化，这主要是借助于满足一个给定WHERE语句的数据可以只保存在一个或多个分区内，这样在查找时就不用查找其他剩余的分区。因为分区可以在创建了分区表后进行修改，所以在第一次配置分区方案时还不曾这么做时，可以重新组织数据，来提高那些常用查询的效率。涉及到例如SUM()和COUNT()这样聚合函数的查询，可以很容易地进行并行处理。这种查询的一个简单例子如 “SELECT salesperson_id, COUNT (orders) as order_total FROM sales GROUP BY salesperson_id；”。通过“并行”，这意味着该查询可以在每个分区上同时进行，最终结果只需通过总计所有分区得到的结果。通过跨多个磁盘来分散数据查询，来获得更大的查询吞吐量。三、分区类型RANGE分区：基于属于一个给定连续区间的列值，把多行分配给分区。 LIST分区：类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择。 HASH分区：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含MySQL 中有效的、产生非负整数值的任何表达式。 KEY分区：类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL服务器提供其自身的哈希函数。必须有一列或多列包含整数值。 RANGE分区基于属于一个给定连续区间的列值，把多行分配给分区。 这些区间要连续且不能相互重叠，使用VALUES LESS THAN操作符来进行定义。以下是实例。 Sql代码：CREATE TABLE employees ( id INT NOT NULL, fname VARCHAR(30), lname VARCHAR(30), hired DATE NOT NULL DEFAULT ‘1970-01-01’, separated DATE NOT NULL DEFAULT ‘9999-12-31’, job_code INT NOT NULL, store_id INT NOT NULL) partition BY RANGE (store_id) ( partition p0 VALUES LESS THAN (6), partition p1 VALUES LESS THAN (11), partition p2 VALUES LESS THAN (16), partition p3 VALUES LESS THAN (21));按照这种分区方案，在商店1到5工作的雇员相对应的所有行被保存在分区P0中，商店6到10的雇员保存在P1中，依次类推。注意，每个分区都是按顺序进行定义，从最低到最高。这是PARTITION BY RANGE 语法的要求；在这点上，它类似于C或Java中的“switch … case”语句。对于包含数据(72, ‘Michael’, ‘Widenius’, ’1998-06-25′, NULL, 13)的一个新行，可以很容易地确定它将插入到p2分区中，但是如果增加了一个编号为第21的商店，将会发生什么呢？在这种方案下，由于没有规则把store_id大于20的商店包含在内，服务器将不知道把该行保存在何处，将会导致错误。 要避免这种错误，可以通过在CREATE TABLE语句中使用一个“catchall” VALUES LESS THAN子句，该子句提供给所有大于明确指定的最高值的值： Sql代码：CREATE TABLE employees ( id INT NOT NULL, fname VARCHAR(30), lname VARCHAR(30), hired DATE NOT NULL DEFAULT ‘1970-01-01’, separated DATE NOT NULL DEFAULT ‘9999-12-31’, job_code INT NOT NULL, store_id INT NOT NULL) PARTITION BY RANGE (store_id) ( PARTITION p0 VALUES LESS THAN (6), PARTITION p1 VALUES LESS THAN (11), PARTITION p2 VALUES LESS THAN (16), PARTITION p3 VALUES LESS THAN MAXVALUE);MAXVALUE 表示最大的可能的整数值。现在，store_id 列值大于或等于16（定义了的最高值）的所有行都将保存在分区p3中。在将来的某个时候，当商店数已经增长到25, 30, 或更多 ，可以使用ALTER TABLE语句为商店21-25, 26-30,等等增加新的分区。在几乎一样的结构中，你还可以基于雇员的工作代码来分割表，也就是说，基于job_code 列值的连续区间。例如——假定2位数字的工作代码用来表示普通（店内的）工人，三个数字代码表示办公室和支持人员，四个数字代码表示管理层，你可以使用下面的语句创建该分区表： Sql代码：CREATE TABLE employees ( id INT NOT NULL, fname VARCHAR(30), lname VARCHAR(30), hired DATE NOT NULL DEFAULT ‘1970-01-01’, separated DATE NOT NULL DEFAULT ‘9999-12-31’, job_code INT NOT NULL, store_id INT NOT NULL) PARTITION BY RANGE (job_code) ( PARTITION p0 VALUES LESS THAN (100), PARTITION p1 VALUES LESS THAN (1000), PARTITION p2 VALUES LESS THAN (10000));在这个例子中, 店内工人相关的所有行将保存在分区p0中，办公室和支持人员相关的所有行保存在分区p1中，管理层相关的所有行保存在分区p2中。在VALUES LESS THAN 子句中使用一个表达式也是可能的。这里最值得注意的限制是MySQL 必须能够计算表达式的返回值作为LESS THAN (&lt;)比较的一部分；因此，表达式的值不能为NULL 。由于这个原因，雇员表的hired, separated, job_code,和store_id列已经被定义为非空（NOT NULL）。除了可以根据商店编号分割表数据外，你还可以使用一个基于两个DATE （日期）中的一个的表达式来分割表数据。例如，假定你想基于每个雇员离开公司的年份来分割表，也就是说，YEAR(separated)的值。实现这种分区模式的CREATE TABLE 语句的一个例子如下所示： Sql代码：CREATE TABLE employees ( id INT NOT NULL, fname VARCHAR(30), lname VARCHAR(30), hired DATE NOT NULL DEFAULT ‘1970-01-01’, separated DATE NOT NULL DEFAULT ‘9999-12-31’, job_code INT, store_id INT) PARTITION BY RANGE (YEAR(separated)) ( PARTITION p0 VALUES LESS THAN (1991), PARTITION p1 VALUES LESS THAN (1996), PARTITION p2 VALUES LESS THAN (2001), PARTITION p3 VALUES LESS THAN MAXVALUE);在这个方案中，在1991年前雇佣的所有雇员的记录保存在分区p0中，1991年到1995年期间雇佣的所有雇员的记录保存在分区p1中， 1996年到2000年期间雇佣的所有雇员的记录保存在分区p2中，2000年后雇佣的所有工人的信息保存在p3中。 RANGE分区在如下场合特别有用：1）、当需要删除一个分区上的“旧的”数据时,只删除分区即可。如果你使用上面最近的那个例子给出的分区方案，你只需简单地使用”ALTER TABLE employees DROP PARTITION p0;”来删除所有在1991年前就已经停止工作的雇员相对应的所有行。对于有大量行的表，这比运行一个如”DELETE FROM employees WHERE YEAR (separated) &lt;= 1990;”这样的一个DELETE查询要有效得多。 2）、想要使用一个包含有日期或时间值，或包含有从一些其他级数开始增长的值的列。3）、经常运行直接依赖于用于分割表的列的查询。例如，当执行一个如”SELECT COUNT(*) FROM employees WHERE YEAR(separated) = 2000 GROUP BY store_id;”这样的查询时，MySQL可以很迅速地确定只有分区p2需要扫描，这是因为余下的分区不可能包含有符合该WHERE子句的任何记录。 注释：这种优化还没有在MySQL 5.1源程序中启用，但是，有关工作正在进行中。 LIST分区类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择。 LIST分区通过使用“PARTITION BY LIST(expr)”来实现，其中“expr”是某列值或一个基于某个列值、并返回一个整数值的表达式，然后通过“VALUES IN (value_list)”的方式来定义每个分区，其中“value_list”是一个通过逗号分隔的整数列表。 注释：在MySQL 5.1中，当使用LIST分区时，有可能只能匹配整数列表。 Sql代码：CREATE TABLE employees ( id INT NOT NULL, fname VARCHAR(30), lname VARCHAR(30), hired DATE NOT NULL DEFAULT ‘1970-01-01’, separated DATE NOT NULL DEFAULT ‘9999-12-31’, job_code INT, store_id INT)；假定有20个音像店，分布在4个有经销权的地区，如下表所示： ==================== 地区 商店ID 号 北区 3, 5, 6, 9, 17 东区 1, 2, 10, 11, 19, 20 西区 4, 12, 13, 14, 18 中心区 7, 8, 15, 16 ==================== 要按照属于同一个地区商店的行保存在同一个分区中的方式来分割表，可以使用下面的“CREATE TABLE”语句： Sql代码：CREATE TABLE employees ( id INT NOT NULL, fname VARCHAR(30), lname VARCHAR(30), hired DATE NOT NULL DEFAULT ‘1970-01-01’, separated DATE NOT NULL DEFAULT ‘9999-12-31’, job_code INT, store_id INT) PARTITION BY LIST(store_id) PARTITION pNorth VALUES IN (3,5,6,9,17), PARTITION pEast VALUES IN (1,2,10,11,19,20), PARTITION pWest VALUES IN (4,12,13,14,18), PARTITION pCentral VALUES IN (7,8,15,16));这使得在表中增加或删除指定地区的雇员记录变得容易起来。例如，假定西区的所有音像店都卖给了其他公司。那么与在西区音像店工作雇员相关的所有记录（行）可以使用查询“ALTER TABLE employees DROP PARTITION pWest；”来进行删除，它与具有同样作用的DELETE（删除）查询“DELETE query DELETE FROM employees WHERE store_id IN (4,12,13,14,18)；”比起来，要有效得多。【要点】：如果试图插入列值（或分区表达式的返回值）不在分区值列表中的一行时，那么“INSERT”查询将失败并报错。例如，假定LIST分区的采用上面的方案，下面的查询将失败： Sql代码：INSERT INTO employees VALUES(224, ‘Linus’, ‘Torvalds’, ‘2002-05-01’, ‘2004-10-12’, 42, 21);这是因为“store_id”列值21不能在用于定义分区pNorth, pEast, pWest,或pCentral的值列表中找到。要重点注意的是，LIST分区没有类似如“VALUES LESS THAN MAXVALUE”这样的包含其他值在内的定义。将要匹配的任何值都必须在值列表中找到。LIST分区除了能和RANGE分区结合起来生成一个复合的子分区，与HASH和KEY分区结合起来生成复合的子分区也是可能的。 HASH分区基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含MySQL 中有效的、产生非负整数值的任何表达式。 要使用HASH分区来分割一个表，要在CREATE TABLE 语句上添加一个“PARTITION BY HASH (expr)”子句，其中“expr”是一个返回一个整数的表达式。它可以仅仅是字段类型为MySQL整型的一列的名字。此外，你很可能需要在后面再添加一个“PARTITIONS num”子句，其中num是一个非负的整数，它表示表将要被分割成分区的数量。 Sql代码：CREATE TABLE employees ( id INT NOT NULL, fname VARCHAR(30), lname VARCHAR(30), hired DATE NOT NULL DEFAULT ‘1970-01-01’, separated DATE NOT NULL DEFAULT ‘9999-12-31’, job_code INT, store_id INT)PARTITION BY HASH(store_id)PARTITIONS 4;如果没有包括一个PARTITIONS子句，那么分区的数量将默认为1。例外：对于NDB Cluster（簇）表，默认的分区数量将与簇数据节点的数量相同，这种修正可能是考虑任何MAX_ROWS设置，以便确保所有的行都能合适地插入到分区中。 LINER HASHMySQL还支持线性哈希功能，它与常规哈希的区别在于，线性哈希功能使用的一个线性的2的幂（powers-of-two）运算法则，而常规哈希使用的是求哈希函数值的模数。线性哈希分区和常规哈希分区在语法上的唯一区别在于，在“PARTITION BY”子句中添加“LINEAR”关键字。 Sql代码：CREATE TABLE employees ( id INT NOT NULL, fname VARCHAR(30), lname VARCHAR(30), hired DATE NOT NULL DEFAULT ‘1970-01-01’, separated DATE NOT NULL DEFAULT ‘9999-12-31’, job_code INT, store_id INT)PARTITION BY LINEAR HASH(YEAR(hired))PARTITIONS 4;假设一个表达式expr，当使用线性哈希功能时，记录将要保存到的分区是num 个分区中的分区N，其中N是根据下面的算法得到： 1. 找到下一个大于num.的、2的幂，我们把这个值称为V ，它可以通过下面的公式得到： 2. V = POWER(2, CEILING(LOG(2, num))) （例如，假定num是13。那么LOG(2,13)就是3.7004397181411。 CEILING(3.7004397181411)就是4，则V = POWER(2,4), 即等于16）。 3. 设置 N = F(column_list) &amp; (V – 1). 4. 当 N &gt;= num: · 设置 V = CEIL(V / 2) · 设置 N = N &amp; (V – 1) 例如，假设表t1，使用线性哈希分区且有4个分区，是通过下面的语句创建的： CREATE TABLE t1 (col1 INT, col2 CHAR(5), col3 DATE) PARTITION BY LINEAR HASH( YEAR(col3) ) PARTITIONS 6; 现在假设要插入两行记录到表t1中，其中一条记录col3列值为’2003-04-14′，另一条记录col3列值为’1998-10-19′。第一条记录将要保存到的分区确定如下： V = POWER(2, CEILING(LOG(2,7))) = 8 N = YEAR(’2003-04-14′) &amp; (8 – 1) = 2003 &amp; 7 = 3 (3 &gt;= 6 为假（FALSE）: 记录将被保存到#3号分区中) 第二条记录将要保存到的分区序号计算如下： V = 8 N = YEAR(’1998-10-19′) &amp; (8-1) = 1998 &amp; 7 = 6 (6 &gt;= 4 为真（TRUE）: 还需要附加的步骤) N = 6 &amp; CEILING(5 / 2) = 6 &amp; 3 = 2 (2 &gt;= 4 为假（FALSE）: 记录将被保存到#2分区中) 按照线性哈希分区的优点在于增加、删除、合并和拆分分区将变得更加快捷，有利于处理含有极其大量（1000吉）数据的表。它的缺点在于，与使用常规HASH分区得到的数据分布相比，各个分区间数据的分布不大可能均衡。 KSY分区类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL服务器提供其自身的哈希函数。必须有一列或多列包含整数值。 Sql代码：CREATE TABLE tk ( col1 INT NOT NULL, col2 CHAR(5), col3 DATE)PARTITION BY LINEAR KEY (col1)PARTITIONS 3;在KEY分区中使用关键字LINEAR和在HASH分区中使用具有同样的作用，分区的编号是通过2的幂（powers-of-two）算法得到，而不是通过模数算法。","tags":[]},{"title":"centos7安装nginx","date":"2018-04-17T09:18:22.000Z","path":"2018/04/17/centos7安装nginx/","text":"./configure –prefix=/usr/local/nginx –user=nginx –group=nginx –with-http_image_filter_module –with-http_geoip_module=dynamic –with-http_sub_module –with-http_dav_module –with-http_flv_module –with-http_mp4_module –with-http_gunzip_module –with-http_gzip_static_module –with-http_random_index_module –with-http_secure_link_module –with-http_degradation_module –with-http_slice_module –with-http_stub_status_module –with-http_perl_module=dynamic –with-mail=dynamic –with-mail_ssl_module –with-pcre –with-pcre-jit –with-stream=dynamic –with-stream_ssl_module –with-google_perftools_module –with-debug yum install gd-devel yum install perl perl-devel perl-ExtUtils-Embed yum -y install GeoIP GeoIP-devel GeoIP-data yum install google-perftools-devel","tags":[]},{"title":"centos7安装SVN1.9.6","date":"2018-04-17T09:17:01.000Z","path":"2018/04/17/centos7安装SVN1-9-6/","text":"wget http://opensource.wandisco.com/centos/7/svn-1.9/RPMS/x86_64/subversion-1.9.6-1.x86_64.rpm wget http://opensource.wandisco.com/centos/7/svn-1.9/RPMS/x86_64/serf-1.3.8-1.x86_64.rpm wget http://opensource.wandisco.com/centos/7/svn-1.9/RPMS/x86_64/serf-devel-1.3.8-1.x86_64.rpm wget http://opensource.wandisco.com/centos/7/svn-1.9/RPMS/x86_64/libserf-devel-1.3.8-1.el7.x86_64.rpm wget http://opensource.wandisco.com/centos/7/svn-1.9/RPMS/x86_64/libserf-1.3.8-1.el7.x86_64.rpm wget http://opensource.wandisco.com/centos/7/svn-1.9/RPMS/x86_64/subversion-devel-1.9.6-1.x86_64.rpm wget http://opensource.wandisco.com/centos/7/svn-1.9/RPMS/x86_64/mod_dav_svn-1.9.6-1.x86_64.rpm wget http://opensource.wandisco.com/centos/7/svn-1.9/RPMS/x86_64/subversion-python-1.9.6-1.x86_64.rpm yum install *.rpm","tags":[]},{"title":"KVM笔记","date":"2018-04-10T08:09:14.000Z","path":"2018/04/10/KVM笔记/","text":"1.安装KVM工具12yum install qemu-kvm qemu-kvm-tools libvirtyum install virt-install 2.创建虚拟盘1qemu-img create -f raw /home/kvm/centos/CentOS-7-x86-64.raw 10G 3.创建虚拟机virt-install –name CentOS7_2 –ram 2048 –vcpus=2 –os-type=linux –accelerate -c /home/kvm/CentOS-7-x86_64-Minimal-1708.iso –disk path=/home/kvm/centos/CentOS-7-x86-64.raw –network bridge=br0,model=virtio –force –autostart –vnc –vncport=5994 –vnclisten=0.0.0.0 4. vnc连接安装系统5. 创建镜像1qemu-img convert -O qcow2 centos6.6.img centos6.6.qcow2 6. 恢复镜像12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;domain type='kvm'&gt; &lt;name&gt;vm01&lt;/name&gt; &lt;memory&gt;4096000&lt;/memory&gt; &lt;currentMemory&gt;4096000&lt;/currentMemory&gt; &lt;vcpu&gt;2&lt;/vcpu&gt; &lt;os&gt; &lt;type arch='x86_64' machine='pc'&gt;hvm&lt;/type&gt; &lt;boot dev='hd'/&gt; &lt;/os&gt; &lt;features&gt; &lt;acpi/&gt; &lt;apic/&gt; &lt;pae/&gt; &lt;/features&gt; &lt;clock offset='localtime'/&gt; &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt; &lt;on_reboot&gt;restart&lt;/on_reboot&gt; &lt;on_crash&gt;destroy&lt;/on_crash&gt; &lt;devices&gt; &lt;emulator&gt;/usr/libexec/qemu-kvm&lt;/emulator&gt; &lt;disk type='file' device='disk'&gt; &lt;driver name='qemu' type='qcow2'/&gt; &lt;source file='/storage/instance/vm01/centos6.6.qcow2'/&gt; &lt;target dev='hda' bus='ide'/&gt; &lt;/disk&gt; &lt;disk type='file' device='disk'&gt; &lt;driver name='qemu' type='qcow2'/&gt; &lt;source file='/storage/instance/vm01/disk.qcow2'/&gt; &lt;target dev='hdb' bus='ide'/&gt; &lt;/disk&gt; &lt;disk type='file' device='cdrom'&gt; &lt;source file='/iso/CentOS-6.6-x86_64-bin-DVD1.iso'/&gt; &lt;target dev='hdc' bus='ide'/&gt; &lt;/disk&gt; &lt;interface type='bridge'&gt; &lt;source bridge='br0'/&gt; &lt;/interface&gt; &lt;input type='mouse' bus='ps2'/&gt; &lt;graphics type='vnc' port='-1' autoport='yes' listen = '0.0.0.0' keymap='en-us'/&gt; &lt;/devices&gt; &lt;/domain&gt; 7.创建虚拟机1# virsh define /storage/instance/vm01/vm01.xml 8. 克隆虚拟机1virt-clone --connect qemu:///system --original Sv1 --name Sv2 --file /home/kvm/centos/Sv2.img 克隆完成之后可能mac地址会有冲突，进入KVM删除/etc/udev/rules.d/70-persistent-net.rules中的eth0的配置，接着把eth1改成eth0，并且修改ifcfg-eth0的mac，确认两个配置文件中的mac地址是一样的。 /etc/libvirt/qemu/Sv2.xml 9. 管理虚拟机的命令virsh的详细命令解析virsh 有命令模式和交互模式如果直接在vrish后面添加参数是命令模式，如果直接写virsh，就会进入交互模式virsh list列出所有的虚拟机，虚拟机的状态有（8）种runing 是运行状态idel 是空闲状态pause 暂停状态shutdown 关闭状态crash 虚拟机崩坏状态daying 垂死状态shut off 不运行完全关闭pmsuspended客户机被关掉电源中中断连接实例qemu：///session (本地连接到个人实例)qemu+unix：///session (本地连接到个人实例)qemu:///system (本地连接到系统实例)qemu+nuix:///system(本地连接到系统实例)qemu://example.com/system(远程连接，TLS)qemu+tcp://example.com/system(远程登录，SASI)qemu+ssl://example.com/system(远程登录，ssl) -v是只显示版本号 -V使显示版本的详细信息-c - -connect 连接远程的主机-l - -log 输出日志-q - -quiet避免额外的信息-r - - readonly 只读，一般和connect配合使用-t - - timing 输出消逝的时间-e - - escape 设置转意序列交互模式quit，exit是离开virsh version 是显示版本cd 进入目录 pwd 打印当前路径*connect URI连接一般有下列几种 xen：/// 连接当地的xem虚拟机qemu：///system （以root的身份）连接当地的qemu和kvm虚拟机qemu;///sessoin 以用户的身份连接当地的qemu和kvmlxc：///session 连接当地的linux容器 hostname 得到主机名字 sysinfo 的到虚拟机系统的详细信息，xml打印出来nodeinfo得到电脑详细配置名字 nodecpustats 的到虚拟cpu 的状态nodemenstats 的内存的详细信息 nodesuspend 延缓打印的时间最大为60 secondsnode-memory-tune 允许你设置node的内存参数 capablilities 打印虚拟机的特点inject-nmi 给客户机注射nmi（不可屏蔽中断） list列出所有的虚拟机（可以加参数）*freecell 打印出虚拟I机中可用的内存 DOMAIN Commandsautostart （domain）：标示自动启动虚拟机 console （domain）：连接虚拟机的控制台*create （file）：从文件创建虚拟机 virsh dumpxml domain.xmlvirsh create domain.xml12define （file）定义一个虚拟机从文件中 desc （domain）显示虚拟机的描述信息destory（domain） 销毁虚拟机 dommemstat（domain） 得到虚拟机运行的内存domblkerror （domain） 显示有错的设备 domblkerror（domian）显示有错 的磁盘domblklist（domain）显示虚拟机的磁盘 domiflist（domain）显示网卡接口domifstat（demo vnet0） 显示网卡信息 domdisplay （demo）输出地址 和显卡dominfo（demo）显示虚拟机的信息 domuuid （demo）显示虚拟机的id*domid（id or name ） 根据名字得到id domjobabort （demo）种植虚拟机的当前任务 dojobinfo （demo） 显示虚拟机的任务 domstat （demo） 显示虚拟机的状态 domcontrol(demo) 返回虚拟机的状态ok or error dump （demo file） 把文件配置输出到文件file dumpxml（demo）直接显示demo的xml文件配置 edit （demo） 编辑主机的配置文件 messagedsave（demo） 虚拟机的信息保存 messagedsave-remove（demo） 移除保存的messagedsavecpu-stats （demo） 虚拟机的cpu状态 screenshot （demo） 虚拟机截屏setmen（demo） size 设置虚拟机的内存 setmaxmen（demo）设置虚拟机的最大内存memtune（demo） 得到虚拟机分区的信息 blkiotune（demo） 得到虚拟机的磁盘信息setvcpus（demo count）设置虚拟机的虚拟cpu个数 shutdown（demo） 关闭虚拟机start（name or id） 开启虚拟机 suspend （demo） 挂起虚拟机resume（demo） 回复虚拟机的suspend状态 dompmwakeup(demo)唤醒挂起的demottyconsole （demo） 输出设备用的终端 vcpucount （demo） 设置cpu个数vcpuinfo（demo） 得到cpu的信息 vncdisplay（demo） 显示虚拟机的ip device commands（设备命令）attach-device （demo file）添加设备从file文件中 attach-interface （demo type source ）添加一个接口*update-device（demo file）更新设备根据file virtual network commadnsnet-autostart (network) 自动启动网卡（default） net-create （file） 把配置加载到文件net-destory ( network )关闭网卡 net-dumpxml（default） 把网卡配置加载到文件net-edit（default） 编辑网卡信息 net-info（default） 网卡信息net-list 显示网卡 net-uuid （default）得到网卡的idnet-name（id）得到网卡的名字 net-start （default）开启网卡 Interface commandsiface-define（file）定义一个接口从文件里面 iface-dumpxml （lo）显示接口I的信息iface-edit（lo） 编辑接口 iface-list 列出所有的接口iface-name （mac） 根据mac得到名字 iface-mac(lo) 根据名字得到maciface-start（lo） 开启接口 iface-unbriged 解绑定 网桥iface-undefine（lo） 不定义配置文件 iface-begin（lo）创建一个现有的接口设置iface-commit 提交生命所有的改变有效，并且让接口工作 iface-rollbak 接口回滚 STORAGE pppl commandspool-auto （pool）标记池自动启动 pool-build（pool）建造一个池pool-create（file）根据文件创建池 pool-define（file）定义但是不开启pool-destory（pool）销毁池，以后能回复 pool-delete（pool）删除池，以后不能恢复pool-dumpxml（pool）查看池的定义文件 pool-edit（pool）编辑池的定义文件pool-info池的信息 pool-list的列表pool-name（id）根据id得到name pool-id（name）根据name得到idpool-start（poop）开启池 pool-uuid （pool） 返回一个池的uuid VOLUME commadsvol-delete（pool）卷的删除 vol-upload（pool） 卷的加载vol-list（pool）列出卷 vol-info（default）卷的信息*vol-name（path）得到卷的名字 （快照）（secret） NWFILTER commandsnwfilter-define （file）根据文件生成一个网络过滤器 nwfilter-undefine（name） 删除网络过滤nwfilter-list 列出来网络过滤 nwfilter-dumpxml（file）生成一个网络过滤的文件*nwfilter-edit（name） 编辑一个网络过滤器 10. WebVirtMgr管理连接1ssh-copy-id root@192.168.1.201","tags":[{"name":"linux,kvm,虚拟机","slug":"linux-kvm-虚拟机","permalink":"http://jianwwpro.github.io/tags/linux-kvm-虚拟机/"}]},{"title":"activiti在oracle不生成表","date":"2017-06-21T08:22:19.000Z","path":"2017/06/21/activiti在oracle不生成表/","text":"报错如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687### Error querying database. Cause: java.sql.SQLException: ORA-00942: table or view does not exist### The error may exist in org/activiti/db/mapping/entity/Property.xml### The error may involve org.activiti.engine.impl.persistence.entity.PropertyEntity.selectProperty-Inline### The error occurred while setting parameters### SQL: select * from ACT_GE_PROPERTY where NAME_ = ?### Cause: java.sql.SQLException: ORA-00942: table or view does not exist at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:23) at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:104) at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:95) at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:59) at org.activiti.engine.impl.db.DbSqlSession.selectById(DbSqlSession.java:323) at org.activiti.engine.impl.db.DbSqlSession.dbSchemaUpdate(DbSqlSession.java:808) at org.activiti.engine.impl.db.DbSqlSession.performSchemaOperationsProcessEngineBuild(DbSqlSession.java:1100) at org.activiti.engine.impl.SchemaOperationsProcessEngineBuild.execute(SchemaOperationsProcessEngineBuild.java:25) at org.activiti.engine.impl.interceptor.CommandExecutorImpl.execute(CommandExecutorImpl.java:24) at org.activiti.engine.impl.interceptor.CommandContextInterceptor.execute(CommandContextInterceptor.java:60) at org.activiti.spring.SpringTransactionInterceptor$1.doInTransaction(SpringTransactionInterceptor.java:42) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130) at org.activiti.spring.SpringTransactionInterceptor.execute(SpringTransactionInterceptor.java:40) at org.activiti.engine.impl.interceptor.LogInterceptor.execute(LogInterceptor.java:32) at org.activiti.engine.impl.ProcessEngineImpl.&lt;init&gt;(ProcessEngineImpl.java:75) at org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl.buildProcessEngine(ProcessEngineConfigurationImpl.java:311) at org.activiti.spring.SpringProcessEngineConfiguration.buildProcessEngine(SpringProcessEngineConfiguration.java:60) at org.activiti.spring.ProcessEngineFactoryBean.getObject(ProcessEngineFactoryBean.java:56) at org.activiti.spring.ProcessEngineFactoryBean.getObject(ProcessEngineFactoryBean.java:32) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:142) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:102) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1442) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:305) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:609) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:469) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:383) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4791) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:977) at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1655) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)Caused by: java.sql.SQLException: ORA-00942: table or view does not exist at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:111) at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:330) at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:287) at oracle.jdbc.driver.T4C8Oall.receive(T4C8Oall.java:742) at oracle.jdbc.driver.T4CPreparedStatement.doOall8(T4CPreparedStatement.java:212) at oracle.jdbc.driver.T4CPreparedStatement.executeForDescribe(T4CPreparedStatement.java:795) at oracle.jdbc.driver.OracleStatement.executeMaybeDescribe(OracleStatement.java:1030) at oracle.jdbc.driver.T4CPreparedStatement.executeMaybeDescribe(T4CPreparedStatement.java:835) at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1123) at oracle.jdbc.driver.OraclePreparedStatement.executeInternal(OraclePreparedStatement.java:3284) at oracle.jdbc.driver.OraclePreparedStatement.execute(OraclePreparedStatement.java:3389) at org.apache.commons.dbcp.DelegatingPreparedStatement.execute(DelegatingPreparedStatement.java:172) at org.apache.commons.dbcp.DelegatingPreparedStatement.execute(DelegatingPreparedStatement.java:172) at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:56) at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:70) at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:57) at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:267) at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:141) at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:105) at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81) at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:101) … 52 moreDec 13, 2012 11:05:33 AM org.springframework.beans.factory.support.DefaultSingletonBeanRegistry destroySingletons 解决办法：加上schema配置，value=数据库用户名 123&lt;bean id=\"processEngineConfiguration\" class=\"org.activiti.spring.SpringProcessEngineConfiguration\"&gt; &lt;property name=\"databaseSchema\" value=\"activiti_test\" /&gt;&lt;/bean&gt;","tags":[{"name":"activiti","slug":"activiti","permalink":"http://jianwwpro.github.io/tags/activiti/"}]},{"title":"ES6常用方法","date":"2017-06-19T06:30:28.000Z","path":"2017/06/19/ES6常用方法/","text":"indexOf 类似字符串的indexOf() 1stringObject.indexOf(value,index) lastIndexOf 类似indexOf()方法，顺序相反 forEach 参数为function，function的参数有三个：遍历的单个内容、对应的索引号、数组本身 123[].forEach(function(value,index,array)&#123;&#125;) map 一一映射，通过return可以返回新的数组 12345var a1 = ['a','b','c']var a2 = a1.map(function(item,index)&#123; console.log(index) return item.toUpperCase()&#125;); 一一映射的内容可以是object,并且将object解开123456let mps = [&#123;id:1,name:'wangjianwu',age:20&#125;,&#123;id:2,name:'keli',age:21&#125;]let ids = mps.map((&#123;id,name&#125;)=&gt;&#123; console.log(name,id) return id&#125;) ###","tags":[{"name":"ES6","slug":"ES6","permalink":"http://jianwwpro.github.io/tags/ES6/"},{"name":"Javascript","slug":"Javascript","permalink":"http://jianwwpro.github.io/tags/Javascript/"}]},{"title":"20170525-Vue使用培训","date":"2017-05-25T05:41:38.000Z","path":"2017/05/25/20170525-Vue使用培训/","text":"git工具使用1. 下载代码1git clone https://github.com/jianwwpro/BookStore.git 2. 代码安装运行123456# install dependenciesnpm install# serve with hot reload at localhost:8080npm run dev#运行完，自动代开浏览器 2.代码更新、提交12345678#代码状态git status#更新代码git pull#提交代码git add -Agit commit -m &apos;注释&apos;git push origim master 3.git的日志以及恢复版本1234567git log#回到上一个版本git reset HEAD^ #将本地的状态回退到和远程的一样 git reset –hard origin/master#回退到某个版本 xxxx代表git log中的idgit reset xxxx vue部分1. 资料 官网：https://cn.vuejs.org/v2/api/ vue-router:https://router.vuejs.org/zh-cn/ vuex: https://vuex.vuejs.org/zh-cn/ vue-resource: https://github.com/pagekit/vue-resource mint-ui: http://mint-ui.github.io/docs/#/ 2. 代码包结构 api: 所有调用后台接口的API assets: 所有静态文件存放处 components：组件存放地，也就是所有页面\b filter: 过滤器，相当于EL表达式中的方法。 router: 页面加载后执行 store: vuex相关的actions,mutation 3. es6相关 Promise: 12345678910111213141516171819202122232425262728function b(msg)&#123; console.log(msg)&#125;//老的写法 function a(d,cb)&#123; if(d.success)&#123; cb('success') &#125;else &#123; cb('error') &#125; &#125; a(&#123;success:true&#125;,b)//success////-------------//新的es6写法function a(d)&#123; return new Promise((resolve,reject)=&gt;&#123; if(d.success)&#123; resolve('success') &#125; else reject('error') &#125;)&#125;a(&#123;success:true&#125;).then(res=&gt;&#123; console.log(res)&#125;,err=&gt;&#123; console.log(err)&#125;) =&gt;写法 1234567891011121314a(&#123;success:true&#125;).then(res=&gt;&#123;//当参数多时，使用括号(res,res2)=&gt;&#123;&#125; console.log(res)&#125;,err=&gt;&#123; console.log(err)&#125;)//相等于var data = &#123;success:true&#125;a(data).then(function(res)&#123; console.log(res)&#125;, function(err)&#123; console.log(res)&#125;)//\b对比上下两种写法，除了语法不同，实际还有一个重要的地方。this的域不一样 \bjs文件的export 和 import 12345678export default&#123; a()&#123; &#125;&#125;import xxx from '../xx'xxx.a() vue 语法 vue的结构1234567891011121314151617181920212223242526272829303132333435363738394041424344 &lt;template&gt; &lt;div class='mypage'&gt; &#123;&#123; a.publishDate | formatter &#125;&#125;相当于EL的$&#123;a&#125; &lt;Button who='page1' @click='clickButton'&gt;&lt;/Button&gt; &lt;/div&gt; &lt;/template&gt; import Button from './Button'//引入组件 import formmter from '../../filter/DateUtils' &lt;script&gt; export default &#123; moounted()&#123; //页面加载完成后 &#123; id &#125; &#125;, data () &#123;//数据内容，类似request.setAttrbute('a':'xxx') return &#123; a:'xxx', b:'yyy' &#125; &#125;,route:&#123; data (&#123;to : &#123;params: &#123;id&#125;&#125;&#125;) &#123; console.log(id) &#125; &#125;, components: &#123;//定义组件 Button &#125;, methods: &#123; clickButton() &#123; console('dd') &#125; &#125; &#125; &lt;script&gt;//scoped\b样式的使用范围. lang是样式的预编译语言 &lt;style scoped lang='stylus'&gt; .mypage background red Button border 1px solid red &lt;/style&gt; Mint-ui \bUI框架12345678910111213141516171819202122232425&lt;template&gt;&lt;div&gt; &lt;input v-model='myvalue'&gt;&#123;&#123;myvalue&#125;&#125;&lt;mt-datetime-picker ref=\"picker\" type=\"time\" v-model=\"pickerValue\"&gt; &lt;/mt-datetime-picker&gt;&lt;/div&gt;&lt;/template&gt;import &#123;Toast,DatetimePicker&#125; from 'mint-ui'export default &#123; data()&#123; return &#123; pickerValue:'', myvalue:'' &#125; &#125; mounted()&#123; Toast('页面加载成功'); &#125;&#125; 任务 注册github账号 下载代码。更新代码。提交代码。 尝试修改页面，按照项目的要求修改 尝试自己加一个新的页面 在修改好的页面，加载自己的数据，数据自己在interface项目中写","tags":[{"name":"Vue","slug":"Vue","permalink":"http://jianwwpro.github.io/tags/Vue/"},{"name":"工作","slug":"工作","permalink":"http://jianwwpro.github.io/tags/工作/"}]},{"title":"Nginx、Tomcat、会话存储Redis配置要点","date":"2017-04-01T08:37:17.000Z","path":"2017/04/01/Nginx、Tomcat、会话存储Redis配置要点/","text":"Nginx负载平衡 + Tomcat + 会话存储Redis配置要点使用Nginx作为Tomcat的负载平衡器，Tomcat的会话Session数据存储在Redis，能够实现0当机的7x24运营效果。因为将会话存储在Redis中，因此Nginx就不必配置成stick粘粘某个Tomcat方式，这样才能真正实现后台多个Tomcat负载平衡，用户请求能够发往任何一个tomcat主机，当我们需要部署新应用代码时，只要停止任何一台tomcat，所有当前在线用户都会导向到运行中的tomcat实例，因为会话数据被序列化到Redis，在线用户不会受到影响，一旦停掉的tomcat实例上线，另外其他重复部署过程。一、Nginx首先，我们安装Nginx:1$ sudo rpm -ivh nginx-1.4.2-1.el6.ngx.x86_64.rpm 编辑/etc/nginx/nginx.conf，加入负载平衡配置： 1234567http &#123;upstream tomcat &#123; server localhost:8080; server localhost:8081; &#125;include /etc/nginx/mime.types;default_type application/octet-stream; 更新/etc/nginx/conf.d/default.conf，用下面location配置替代原来： 123location / &#123; proxy_pass http://tomcat; &#125; 重新启动Nginx:sudo service nginx restart 二、Tomcat实例 下面我们开始安装两个Tomcat实例，改变第二个服务器端口，防止它们冲突，这时如果你在浏览器输入 https://localhost，我们访问到缺省的Tomcat页面，因为我们没有设置会话粘粘sticky sessions，每个请求分发使用负载平衡round robin算法，也就是意味着每次请求都会创建一个新的会话，通过tomcat内建案例可以方便看到这种行为，进入http://localhost/examples/servlets/servlet/SessionExample，过一会儿刷新一下这个页面，注意到每次Session ID都会改变，让我们来解决这个问题。下载安装Redis，在http://redis.io/download 有文档说明如何安装和启动，启动服务器以后，使用客户端程序检查是否正在工作。最后，我们需要配置Tomcat存储会话到Redis，我们需要使用 tomcat-redis-session-manager开源库包，具体需要一些调整，下载这个项目的源码项目，重新构建，本文使用版本为commons-pool2-2.2.jar 和 jedis-2.6.1.jar.复制这些Jar到tomcat的lib目录。将你的commons-pool, jedis 更新版本和tomcat版本在tomcat-redis-session-manager的build.gradle中配置一下，然后重新构建项目，将构建结果 tomcat-redis-session-manager-1.2.jar 复制到tomcat lib目录下，两个实例都要复制，在tomcat的context.xml中配置： 123456789101112131415&lt;Valve className=\"com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve\" /&gt;&lt;Manager className=\"com.orangefunction.tomcat.redissessions.RedisSessionManager\" host=\"localhost\" port=\"6379\" database=\"0\" maxInactiveInterval=\"60\" /&gt;&lt;ValveclassName=\"com.radiadesign.catalina.session.RedisSessionHandlerValve\"/&gt;&lt;ManagerclassName=\"com.radiadesign.catalina.session.RedisSessionManager\" host=\"localhost\"&lt;!-- optional: defaults to \"localhost\" --&gt; port=\"6379\" &lt;!-- optional: defaults to \"6379\" --&gt; database=\"0\" &lt;!-- optional: defaults to \"0\" --&gt; maxInactiveInterval=\"60\" &lt;!-- optional: defaults to \"60\" (in seconds) --&gt;/&gt; 重新启动tomcat一切完成，你现在可以看到tomcat会话存储在redis中，使用先前tomcat内置案例，试验两个tomcat开机和关机不同情况进行测试，会话数据都不会受到影响。 所需要的jar包： commons-pool-1.3.jarcommons-pool2-2.3.jarjedis-2.7.3.jarspring-data-redis-1.6.0.RELEASE.jatomcat-redis-session-manager1.2.jar","tags":[{"name":"nginx","slug":"nginx","permalink":"http://jianwwpro.github.io/tags/nginx/"},{"name":"redis","slug":"redis","permalink":"http://jianwwpro.github.io/tags/redis/"},{"name":"tomcat","slug":"tomcat","permalink":"http://jianwwpro.github.io/tags/tomcat/"},{"name":"服务器","slug":"服务器","permalink":"http://jianwwpro.github.io/tags/服务器/"}]},{"title":"solr中ik分词自定义词库和停止词","date":"2017-03-27T10:04:51.000Z","path":"2017/03/27/solr中ik分词自定义词库和停止词/","text":"1、在solr的web中：solr-webapp/webapp/WEB-INF目录下新增一个文件夹：classes2、新增一个文件：IKAnalyzer.cfg.xml。xml内如如下1234567891011&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\"&gt; &lt;properties&gt; &lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt; &lt;!--用户可以在这里配置自己的扩展字典 my.dic即为扩展分词库，分词库可以为多个，以分号隔开即可。停止词库一样--&gt; &lt;entry key=\"ext_dict\"&gt;my.dic;&lt;/entry&gt; &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt; &lt;entry key=\"ext_stopwords\"&gt;stopword.dic;&lt;/entry&gt; &lt;/properties&gt; 3、classes下新增my.dic文件。文件格式必需是：无BOM的UTF-8格式,输入自己的词。4、classes下新增文件stopword.dic。文件格式必需是：无BOM的UTF-8格式。","tags":[{"name":"Solr","slug":"Solr","permalink":"http://jianwwpro.github.io/tags/Solr/"}]},{"title":"Linux日常操作命令","date":"2017-03-06T08:49:43.000Z","path":"2017/03/06/Linux日常操作命令/","text":"挂载共享12mount -t smbfs //wangjianwu:artron@192.168.82.13/anbo/ /Users/jsb/Documents/WorkSpace/data/mount -t smbfs //wangjianwu:jianwu@192.168.82.100/artbase/artbase/artbase-jiami /Users/jsb/Documents/WorkSpace/projects/artbase/ rsync在ssh模式下的断点续传 由于要从服务器拉去mongodb的数据到本地处理，但是mongodb备份文件过大，使用ssh进行传输时，出现stalled后断开。故使用rsync继续断点续传 1rsync -P -e &apos;ssh -p 1056&apos; -r root@cy:/data/backup/marc_book/marc_book . -P 显示进度-r 递归同步文件夹下的文件ssh -p 指定ssh端口 备份mongodb数据库1/usr/local/mongodb/bin/mongodump -d marc_book -o . 恢复mongodb数据库1mongorestore -d marc_book marc_book/","tags":[{"name":"Linux","slug":"Linux","permalink":"http://jianwwpro.github.io/tags/Linux/"}]},{"title":"maven遇到的坑","date":"2017-03-03T08:31:33.000Z","path":"2017/03/03/maven遇到的坑/","text":"1. 创建项目模板mvn archetype:create -DgroupId=com.mavenweb.test -DartifactId=mavenweb -DarchetypeArtifactId=maven-archetype-webapp maven clean compile mvn eclipse:eclipse 2. lib输出问题12345&lt;classpathentry kind=\"con\" path=\"org.maven.ide.eclipse.MAVEN2_CLASSPATH_CONTAINER\"&gt; &lt;attributes&gt; &lt;attribute name=\"org.eclipse.jst.component.dependency\" value=\"/WEB-INF/lib\"/&gt; &lt;/attributes&gt;&lt;/classpathentry&gt; 3. 查包的冲突1mvn dependency:tree -Dverbose -Dmaven.test.skip=true 排除冲突的包12345678910111213141516&lt;dependency&gt; &lt;groupId&gt;org.unitils&lt;/groupId&gt; &lt;artifactId&gt;unitils-dbmaintainer&lt;/artifactId&gt; &lt;version&gt;$&#123;unitils.version&#125;&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;dbunit&lt;/artifactId&gt; &lt;groupId&gt;org.dbunit&lt;/groupId&gt; &lt;/exclusion&gt; &lt;!-- 这个就是我们要加的片断 --&gt; &lt;exclusion&gt; &lt;artifactId&gt;asm&lt;/artifactId&gt; &lt;groupId&gt;asm&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; 4. 手动安装包1install:install-file -DgroupId=com.google.code.kaptcha -DartifactId=kaptcha -Dversion=2.3.2 -Dfile=/Users/wangjianwu/Documents/WorkSpace/JavaWorkspace/project-caiyun/caiyunboss-platform/bin/kaptcha-2.3.2.jar -Dpackaging=jar -DgeneratePom=true 5. 打包指定配置1mvn package -Dmaven.test.skip=true -P production 1234567891011121314151617181920212223242526&lt;profile&gt; &lt;!-- 生产环境 --&gt; &lt;id&gt;production&lt;/id&gt; &lt;properties&gt; &lt;profiles.active&gt;production&lt;/profiles.active&gt; &lt;/properties&gt; &lt;/profile&gt;&lt;build&gt; &lt;finalName&gt;caiyunboss-webapp&lt;/finalName&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;!-- 资源根目录排除各环境的配置，使用单独的资源目录来指定 --&gt; &lt;excludes&gt; &lt;exclude&gt;test/*&lt;/exclude&gt; &lt;exclude&gt;production/*&lt;/exclude&gt; &lt;exclude&gt;development/*&lt;/exclude&gt; &lt;/excludes&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources/$&#123;profiles.active&#125;&lt;/directory&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/build&gt;","tags":[{"name":"maven","slug":"maven","permalink":"http://jianwwpro.github.io/tags/maven/"}]},{"title":"JavaEE开发常用","date":"2017-02-23T03:08:56.000Z","path":"2017/02/23/JavaEE开发常用/","text":"关于mybatis 在使用mysql自增长主键，插入后返回ID问题。1&lt;insert id=&quot;insert&quot; parameterType=&quot;com.caiyun.boss.entity.CaiOrder&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;","tags":[{"name":"Java","slug":"Java","permalink":"http://jianwwpro.github.io/tags/Java/"}]},{"title":"CMYK转RGB","date":"2016-11-25T08:25:31.000Z","path":"2016/11/25/CMYK转RGB/","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798package com.lasun.acms.action;import com.sun.image.codec.jpeg.JPEGCodec;import com.sun.image.codec.jpeg.JPEGImageEncoder;import java.awt.Transparency;import java.awt.color.ColorSpace;import java.awt.image.BufferedImage;import java.awt.image.ColorModel;import java.awt.image.ComponentColorModel;import java.awt.image.DataBuffer;import java.awt.image.DataBufferByte;import java.awt.image.Raster;import java.awt.image.WritableRaster;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.util.Iterator;import javax.imageio.IIOException;import javax.imageio.ImageIO;import javax.imageio.ImageReader;import javax.imageio.stream.ImageInputStream;public class CMYK &#123; public void readImage(String filename) throws IOException &#123; File file = new File(filename); ImageInputStream input = ImageIO.createImageInputStream(file); Iterator readers = ImageIO.getImageReaders(input); if(readers == null || !readers.hasNext()) &#123; throw new RuntimeException(\"1 No ImageReaders found\"); &#125; ImageReader reader = (ImageReader) readers.next(); reader.setInput(input); String format = reader.getFormatName() ; BufferedImage image; if ( \"JPEG\".equalsIgnoreCase(format) ||\"JPG\".equalsIgnoreCase(format) ) &#123; try &#123; // 尝试读取图片 (包括颜色的转换). image = reader.read(0); //RGB &#125; catch (IIOException e) &#123; // 读取Raster (没有颜色的转换). Raster raster = reader.readRaster(0, null);//CMYK image = createJPEG4(raster); &#125; image.getGraphics().drawImage(image, 0, 0, null); String newfilename = filename.substring(0,filename.lastIndexOf(\".\"))+\"_rgb\"+filename.substring(filename.lastIndexOf(\".\")); File newFile = new File(newfilename); FileOutputStream out = new FileOutputStream(newFile); JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out); encoder.encode(image); out.flush(); out.close(); &#125; &#125; private static BufferedImage createJPEG4(Raster raster) &#123; int w = raster.getWidth(); int h = raster.getHeight(); byte[] rgb = new byte[w * h * 3]; //彩色空间转换 float[] Y = raster.getSamples(0, 0, w, h, 0, (float[]) null); float[] Cb = raster.getSamples(0, 0, w, h, 1, (float[]) null); float[] Cr = raster.getSamples(0, 0, w, h, 2, (float[]) null); float[] K = raster.getSamples(0, 0, w, h, 3, (float[]) null); for (int i = 0, imax = Y.length, base = 0; i &lt; imax; i++, base += 3) &#123; float k = 220 - K[i], y = 255 - Y[i], cb = 255 - Cb[i], cr = 255 - Cr[i]; double val = y + 1.402 * (cr - 128) - k; val = (val - 128) * .65f + 128; rgb[base] = val &lt; 0.0 ? (byte) 0 : val &gt; 255.0 ? (byte) 0xff : (byte) (val + 0.5); val = y - 0.34414 * (cb - 128) - 0.71414 * (cr - 128) - k; val = (val - 128) * .65f + 128; rgb[base + 1] = val &lt; 0.0 ? (byte) 0 : val &gt; 255.0 ? (byte) 0xff : (byte) (val + 0.5); val = y + 1.772 * (cb - 128) - k; val = (val - 128) * .65f + 128; rgb[base + 2] = val &lt; 0.0 ? (byte) 0 : val &gt; 255.0 ? (byte) 0xff : (byte) (val + 0.5); &#125; raster = Raster.createInterleavedRaster(new DataBufferByte(rgb, rgb.length), w, h, w * 3, 3, new int[]&#123;0, 1, 2&#125;, null); ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_sRGB); ColorModel cm = new ComponentColorModel(cs, false, true, Transparency.OPAQUE, DataBuffer.TYPE_BYTE); return new BufferedImage(cm, (WritableRaster) raster, true, null); &#125; public static void main(String[] args) throws IOException &#123; String filename = \"e:/28531383187802097.jpg\"; CMYK cm = new CMYK(); cm.readImage(filename); &#125; &#125;","tags":[{"name":"Java","slug":"Java","permalink":"http://jianwwpro.github.io/tags/Java/"},{"name":"CMYK","slug":"CMYK","permalink":"http://jianwwpro.github.io/tags/CMYK/"},{"name":"图片","slug":"图片","permalink":"http://jianwwpro.github.io/tags/图片/"}]},{"title":"Redux学习笔记","date":"2016-09-09T06:21:55.000Z","path":"2016/09/09/Redux学习笔记/","text":"单一数据源1234567891011121314151617181920212223242526272829303132333435363738394041import &#123; createStore &#125; from 'redux';/** * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。 * 描述了 action 如何把 state 转变成下一个 state。 * * state 的形式取决于你，可以是基本类型、数组、对象、 * 甚至是 Immutable.js 生成的数据结构。惟一的要点是 * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。 * * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper) * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。 */function counter(state = 0, action) &#123; switch (action.type) &#123; case 'INCREMENT': return state + 1; case 'DECREMENT': return state - 1; default: return state; &#125;&#125;// 创建 Redux store 来存放应用的状态。// API 是 &#123; subscribe, dispatch, getState &#125;。let store = createStore(counter);// 可以手动订阅更新，也可以事件绑定到视图层。store.subscribe(() =&gt; console.log(store.getState()));// 改变内部 state 惟一方法是 dispatch 一个 action。// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行store.dispatch(&#123; type: 'INCREMENT' &#125;);// 1store.dispatch(&#123; type: 'INCREMENT' &#125;);// 2store.dispatch(&#123; type: 'DECREMENT' &#125;);// 1 入口1. 产出storeredux.createStore 进行创建store，参数是reducers 2. 产出 reducereducers 输出 redux.combineReducers({各种switch case方法,…})每一次状态改变都会影响reducers的输出 3. 将store 输入到react-redux1234import &#123; Provivder &#125; from 'react-redux'&lt;Provider sotre=&#123;store&#125;&gt; &lt;App/&gt;&lt;/Provider&gt; 4. 在app中调用action1. 使用connect，注入props1234567891011render()&#123; const &#123;dispatch,visibleTodos,visiblibityFilter&#125; = this.props//通过react-redux.connect注入&#125;function select(state)&#123; return &#123;//对象里面的数据将注入props里，可直接使用this.props调用 visibleTodos: selectTodos(state.todos,state.visibilityFilter),//传入所有列表，筛选出想要的 visibilityFilter: state.visibilityFIlter &#125;&#125;export default connect(select)(App) 2. 调用dispatch或则使用props 方式1：注入后的dispatch到action去，aciton返回的状态就回被reduce监控执行 方式2：可从this.props中获取注入的对象","tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://jianwwpro.github.io/tags/学习笔记/"},{"name":"Redux","slug":"Redux","permalink":"http://jianwwpro.github.io/tags/Redux/"}]},{"title":"React0.14发布拆分react和React-dom","date":"2016-09-09T06:21:55.000Z","path":"2016/09/09/React0-14发布拆分react和React-dom/","text":"React 从0.14 开始有一些重要的改进，主要是简化代码编写，提供更好的支持环境，比如 React Native。原本的 API 在 v0.14 版中仍然可以使用，只不过会有 警告，在 v0.15 版的时候完全移除。 Reactjs 0.14 获取： ReactDev build with warnings: https://fb.me/react-0.14.0.jsMinified build for production: https://fb.me/react-0.14.0.min.js React with Add-OnsDev build with warnings: https://fb.me/react-with-addons-0.14.0.jsMinified build for production: https://fb.me/react-with-addons-0.14.0.min.js React DOM (include React in the page before React DOM)Dev build with warnings: https://fb.me/react-dom-0.14.0.jsMinified build for production: https://fb.me/react-dom-0.14.0.min.js React 分成两个包原本的 package``` 被拆分为 ```react``` 及 ```react-dom``` 两个 package。 12#### react包 createElementcreateClassComponentPropTypesChildren123456#### react-dom包 ```renderunmountComponentAtNodefindDOMNodeserver/renderToStringserver/renderToStaticMarkup 组件写法12345678910111213import React,&#123;Component&#125; from &apos;react&apos;import &#123;render&#125; from &apos;react-dom&apos;class HelloWorld extends Component&#123; render()&#123; return ( &lt;div&gt;hello world&lt;/div&gt; ) &#125;&#125;render( &lt;HelloWorld /&gt;) React.addons 下工具也变成独立包1234567891011react-addons-clone-with-propsreact-addons-create-fragmentreact-addons-css-transition-groupreact-addons-linked-state-mixinreact-addons-perfreact-addons-pure-render-mixinreact-addons-shallow-comparereact-addons-test-utilsreact-addons-transition-groupreact-addons-updateReactDOM.unstable_batchedUpdates （在 react-dom 中） refs 变成了真正的 DOM 节点 当我们需要获取 React 组件上某个 DOM 节点时，React 提供了 refs 方法方便我们快速引用。为了方便我们使用，React 还「贴心」地对 refs 做了一层封装，使用 this.refs.xxx.getDOMNode() 或 React.findDOMNode(this.refs.xxx) 可以获取到真正的 DOM 节点。 结果发现大家真正需要的就是 DOM 节点本身，封装了半天完全是浪费感情。 于是在 v0.14 版中 refs 指向的就是 DOM 节点，同时也会保留 .getDOMNode() 方法（带 warning），最终在 v0.15 版中去除该方法。 var Zoo = React.createClass({ render: function() { return Giraffe name: ; }, showName: function() { // 之前： // var input = this.refs.giraffe.getDOMNode(); // // v0.14 版： var input = this.refs.giraffe; alert(input.value); }});需要注意的是，如果你给自定义的 React 组件（除了 DOM 自带的标签，如 div、p 等）添加 refs，表现和行为与之前一致。 无状态的函数式组件 其实在实际业务系统中使用 React 时，我们会写很多只有 render 方法的 React 组件。为了减少冗余的代码量，React v0.14 中引入了 无状态的函数式组件（Stateless functional components） 的概念。先看看长啥样： // 一个 ES6 箭头函数定义的无状态函数式组件var Aquarium = (props) =&gt; { var fish = getFish(props.species); return {fish};};// 或者更加简化的版本var Aquarium = ({species}) =&gt; ( {getFish(species)} );// 最终使用方式: 可以看到，没有 React.createClass，也没有显式的 render，写起来更加轻松了。 当然，新语法也有需要注意的地方： 没有任何生命周期方法，如 componentDidMount 等不能添加 refs可以通过给函数添加属性定义 propTypes 和 defaultPropsreact-tools 及 JSXTransformer.js 已弃用 拥抱 Babel 吧同学们！ 编译器优化 在 Babel 5.8.23 及更新的版本中，新增了两项专门针对 React 的优化配置，仅推荐在生产环境中开启，因为优化后会导致代码的报错更加扑朔迷离（本来报错就已经很难定位了……）。 optimisation.react.inlineElements 将 JSX 元素转换为对象而非使用 React.createElementoptimisation.react.constantElements 针对拥有完全静态子树的组件，将其创建过程提升到顶层（Top level），从而减少对 React.createElement 方法的调用其它变化 React.initializeTouchEvents 已弃用由于 refs 的相关变化（见上文），TestUtils.findAllInRenderedTree 及相关的方法不再接受 DOM 组件作为参数，只能传入自定义的 React 组件props 一旦创建永远不可修改，因此 .setProps 及 .replaceProps 已废弃children 不可以传对象类型，推荐传入数组，或使用 React.createFragment 方法（其实就是转换为了数组）React.addons.classSet 已经移除，使用 classnames package 替代将要发生的改变 在 v0.15 版中，下列内容将会发生改变： this.getDOMNode() 方法将会废弃，推荐使用 React.findDOMNode()setProps 及 replaceProps 将会废弃React.addons.cloneWithProps 已废弃，推荐使用 React.cloneElements，新方法不会自动 merge className 及 styleReact.addons.CSSTransitionGroup 将不再监听 transition 事件，因此使用者需要显式指定动画的 timeout，如：transitionEnterTimeout={500}。ES6 组件类必须 extends React.Component（如果使用 React.createClass 语法则不受影响）在多次 render 中重用并改变 style 对象已经被弃用（这一点不是太明白，中心思想貌似是不要 mutate object？）","tags":[{"name":"react","slug":"react","permalink":"http://jianwwpro.github.io/tags/react/"},{"name":"前端","slug":"前端","permalink":"http://jianwwpro.github.io/tags/前端/"}]},{"title":"Ionic2学习笔记","date":"2016-09-09T06:21:55.000Z","path":"2016/09/09/Ionic2学习笔记/","text":"1. Action Sheetsrole: descructive、cancel123456789this.actionSheetController.create(&#123; title:'xxx', buttons:[ &#123; text:'', role:'descructive' &#125; ]&#125;) 2. AlertsBasic Alert12345this.alertController.create(&#123; title:'xxx', subTitle:'xxx', buttons:['OK']&#125;) Prompt Alert12345678910111213141516171819let propmt = this.alertController.create(&#123; title: 'Login', message:'', inputs:[ &#123; name:'title', placehodler:'enter title' &#125;, ], buttons:[ &#123; text:'OK', handler:data=&gt;&#123; console.log(data); &#125; &#125; ]&#125;);propmt.present(); Confirmation Alerts类似上面 Radio12345678910111213141516let radioAlert = this.alertController.create();radioAlert.setTitle(\"title\");radioAlert.addInput(&#123; type:'radio', label:'label', value:'value', checked:true&#125;);radioAlert.addButton('cancel');radioAlert.addButton(&#123; text:'OK', handler:data=&gt;&#123; &#125;&#125;);radioAlert.present(); Checkbox与radio alert类似，type为checkbox 4.Badges123456&lt;ion-item&gt; &lt;ion-icon name=\"logo=twitter\" item-left&gt;&lt;/ion-icon&gt; &lt;ion-badge item-right&gt;260k&lt;/ion-badge&gt;&lt;/ion-item&gt;&lt;ion-badge secondary&gt;&lt;/ion-badge&gt; 5. buttons default outline clear round block full button size : small large icon buttons 1234&lt;button&gt; &lt;ion-icon name='home'&gt;&lt;/ion-icon&gt; Left Icon&lt;/button&gt; floating button 1&lt;button fab&gt;FAB&lt;/button&gt; buttons in components 123ion-header&gt;ion-buttons[start]&gt;button&gt;icon-icon[name=&apos;contact&apos;] ion-buttons[end]&gt;button&gt;icon-icon[name=&apos;search&apos;]ion-list&gt;ion-item&gt;button[outline][item-right]&gt;ion-icon[name=&quot;star&quot;] 6. CardsBasic Cards12ion-card&gt;ion-card-header &gt;ion-card-content Card HeadersList In Cards12ion-card&gt;ion-card-header &gt;ion-list&gt;button[ion-item]&gt;ion-icon[name='cart'][item-left]shopping Images In Cards123ion-card&gt;img &gt;ion-card-content&gt;ion-card-title &gt;p","tags":[{"name":"ionic","slug":"ionic","permalink":"http://jianwwpro.github.io/tags/ionic/"},{"name":"ionic2","slug":"ionic2","permalink":"http://jianwwpro.github.io/tags/ionic2/"},{"name":"学习笔记","slug":"学习笔记","permalink":"http://jianwwpro.github.io/tags/学习笔记/"}]},{"title":"灾难悼念整站灰色","date":"2016-09-08T08:00:20.000Z","path":"2016/09/08/灾难悼念整站灰色/","text":"当遇到国际/国家灾难时，网站需要整体灰色。使用滤镜，可以在chrome、IE7/8/9/10还可以使用filter处理，但是在IE11就不支持，所以需要外加js来做。 1234567891011body *&#123; -webkit-filter: saturate(0); -webkit-filter: grayscale(100%); /* webkit */ -moz-filter: grayscale(100%); /*firefox*/ -ms-filter: grayscale(100%); /*ie9*/ -o-filter: grayscale(100%); /*opera*/ filter: grayscale(100%); filter:progid:DXImageTransform.Microsoft.BasicImage(grayscale=1); filter:gray; /*ie9- */&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323/* * -- grayscale.js -- * Copyright (C) James Padolsey (http://james.padolsey.com) * Download by http://www.codefans.net */var grayscale = (function()&#123; var config = &#123; colorProps: ['color','backgroundColor','borderBottomColor','borderTopColor','borderLeftColor','borderRightColor','backgroundImage'], externalImageHandler : &#123; /* Grayscaling externally hosted images does not work - Use these functions to handle those images as you so desire */ /* Out of convenience these functions are also used for browsers like Chrome that do not support CanvasContext.getImageData */ init : function(el, src) &#123; if (el.nodeName.toLowerCase() === 'img') &#123; // Is IMG element... &#125; else &#123; // Is background-image element: // Default - remove background images data(el).backgroundImageSRC = src; el.style.backgroundImage = ''; &#125; &#125;, reset : function(el) &#123; if (el.nodeName.toLowerCase() === 'img') &#123; // Is IMG element... &#125; else &#123; // Is background-image element: el.style.backgroundImage = 'url(' + (data(el).backgroundImageSRC || '') + ')'; &#125; &#125; &#125; &#125;, log = function()&#123; try &#123; window.console.log.apply(console, arguments); &#125; catch(e) &#123;&#125;; &#125;, isExternal = function(url) &#123; // Checks whether URL is external: 'CanvasContext.getImageData' // only works if the image is on the current domain. return (new RegExp('https?://(?!' + window.location.hostname + ')')).test(url); &#125;, data = (function()&#123; var cache = [0], expando = 'data' + (+new Date()); return function(elem) &#123; var cacheIndex = elem[expando], nextCacheIndex = cache.length; if(!cacheIndex) &#123; cacheIndex = elem[expando] = nextCacheIndex; cache[cacheIndex] = &#123;&#125;; &#125; return cache[cacheIndex]; &#125;; &#125;)(), desatIMG = function(img, prepare, realEl) &#123; // realEl is only set when img is temp (for BG images) var canvas = document.createElement('canvas'), context = canvas.getContext('2d'), height = img.naturalHeight || img.offsetHeight || img.height, width = img.naturalWidth || img.offsetWidth || img.width, imgData; canvas.height = height; canvas.width = width; context.drawImage(img, 0, 0); try &#123; imgData = context.getImageData(0, 0, width, height); &#125; catch(e) &#123;&#125; if (prepare) &#123; desatIMG.preparing = true; // Slowly recurse through pixels for prep, // :: only occurs on grayscale.prepare() var y = 0; (function()&#123; if (!desatIMG.preparing) &#123; return; &#125; if (y === height) &#123; // Finished! context.putImageData(imgData, 0, 0, 0, 0, width, height); realEl ? (data(realEl).BGdataURL = canvas.toDataURL()) : (data(img).dataURL = canvas.toDataURL()) &#125; for (var x = 0; x &lt; width; x++) &#123; var i = (y * width + x) * 4; // Apply Monoschrome level across all channels: imgData.data[i] = imgData.data[i+1] = imgData.data[i+2] = RGBtoGRAYSCALE(imgData.data[i], imgData.data[i+1], imgData.data[i+2]); &#125; y++; setTimeout(arguments.callee, 0); &#125;)(); return; &#125; else &#123; // If desatIMG was called without 'prepare' flag // then cancel recursion and proceed with force! (below) desatIMG.preparing = false; &#125; for (var y = 0; y &lt; height; y++) &#123; for (var x = 0; x &lt; width; x++) &#123; var i = (y * width + x) * 4; // Apply Monoschrome level across all channels: imgData.data[i] = imgData.data[i+1] = imgData.data[i+2] = RGBtoGRAYSCALE(imgData.data[i], imgData.data[i+1], imgData.data[i+2]); &#125; &#125; context.putImageData(imgData, 0, 0, 0, 0, width, height); return canvas; &#125;, getStyle = function(el, prop) &#123; var style = document.defaultView &amp;&amp; document.defaultView.getComputedStyle ? document.defaultView.getComputedStyle(el, null)[prop] : el.currentStyle[prop]; // If format is #FFFFFF: (convert to RGB) if (style &amp;&amp; /^#[A-F0-9]/i.test(style)) &#123; var hex = style.match(/[A-F0-9]&#123;2&#125;/ig); style = 'rgb(' + parseInt(hex[0], 16) + ',' + parseInt(hex[1], 16) + ',' + parseInt(hex[2], 16) + ')'; &#125; return style; &#125;, RGBtoGRAYSCALE = function(r,g,b) &#123; // Returns single monochrome figure: return parseInt( (0.2125 * r) + (0.7154 * g) + (0.0721 * b), 10 ); &#125;, getAllNodes = function(context) &#123; var all = Array.prototype.slice.call(context.getElementsByTagName('*')); all.unshift(context); return all; &#125;; var init = function(context) &#123; // Handle if a DOM collection is passed instead of a single el: if (context &amp;&amp; context[0] &amp;&amp; context.length &amp;&amp; context[0].nodeName) &#123; // Is a DOM collection: var allContexts = Array.prototype.slice.call(context), cIndex = -1, cLen = allContexts.length; while (++cIndex&lt;cLen) &#123; init.call(this, allContexts[cIndex]); &#125; return; &#125; context = context || document.documentElement; if (!document.createElement('canvas').getContext) &#123; context.style.filter = 'progid:DXImageTransform.Microsoft.BasicImage(grayscale=1)'; context.style.zoom = 1; return; &#125; var all = getAllNodes(context), i = -1, len = all.length; while (++i&lt;len) &#123; var cur = all[i]; if (cur.nodeName.toLowerCase() === 'img') &#123; var src = cur.getAttribute('src'); if(!src) &#123; continue; &#125; if (isExternal(src)) &#123; config.externalImageHandler.init(cur, src); &#125; else &#123; data(cur).realSRC = src; try &#123; // Within try statement just encase there's no support.... cur.src = data(cur).dataURL || desatIMG(cur).toDataURL(); &#125; catch(e) &#123; config.externalImageHandler.init(cur, src); &#125; &#125; &#125; else &#123; for (var pIndex = 0, pLen = config.colorProps.length; pIndex &lt; pLen; pIndex++) &#123; var prop = config.colorProps[pIndex], style = getStyle(cur, prop); if (!style) &#123;continue;&#125; if (cur.style[prop]) &#123; data(cur)[prop] = style; &#125; // RGB color: if (style.substring(0,4) === 'rgb(') &#123; var monoRGB = RGBtoGRAYSCALE.apply(null, style.match(/\\d+/g)); cur.style[prop] = style = 'rgb(' + monoRGB + ',' + monoRGB + ',' + monoRGB + ')'; continue; &#125; // Background Image: if (style.indexOf('url(') &gt; -1) &#123; var urlPatt = /\\(['\"]?(.+?)['\"]?\\)/, url = style.match(urlPatt)[1]; if (isExternal(url)) &#123; config.externalImageHandler.init(cur, url); data(cur).externalBG = true; continue; &#125; // data(cur).BGdataURL refers to caches URL (from preparation) try &#123; var imgSRC = data(cur).BGdataURL || (function()&#123; var temp = document.createElement('img'); temp.src = url; return desatIMG(temp).toDataURL(); &#125;)(); cur.style[prop] = style.replace(urlPatt, function(_, url)&#123; return '(' + imgSRC + ')'; &#125;); &#125; catch(e) &#123; config.externalImageHandler.init(cur, url); &#125; &#125; &#125; &#125; &#125; &#125;; init.reset = function(context) &#123; // Handle if a DOM collection is passed instead of a single el: if (context &amp;&amp; context[0] &amp;&amp; context.length &amp;&amp; context[0].nodeName) &#123; // Is a DOM collection: var allContexts = Array.prototype.slice.call(context), cIndex = -1, cLen = allContexts.length; while (++cIndex&lt;cLen) &#123; init.reset.call(this, allContexts[cIndex]); &#125; return; &#125; context = context || document.documentElement; if (!document.createElement('canvas').getContext) &#123; context.style.filter = 'progid:DXImageTransform.Microsoft.BasicImage(grayscale=0)'; return; &#125; var all = getAllNodes(context), i = -1, len = all.length; while (++i&lt;len) &#123; var cur = all[i]; if (cur.nodeName.toLowerCase() === 'img') &#123; var src = cur.getAttribute('src'); if (isExternal(src)) &#123; config.externalImageHandler.reset(cur, src); &#125; cur.src = data(cur).realSRC || src; &#125; else &#123; for (var pIndex = 0, pLen = config.colorProps.length; pIndex &lt; pLen; pIndex++) &#123; if (data(cur).externalBG) &#123; config.externalImageHandler.reset(cur); &#125; var prop = config.colorProps[pIndex]; cur.style[prop] = data(cur)[prop] || ''; &#125; &#125; &#125; &#125;; init.prepare = function(context) &#123; // Handle if a DOM collection is passed instead of a single el: if (context &amp;&amp; context[0] &amp;&amp; context.length &amp;&amp; context[0].nodeName) &#123; // Is a DOM collection: var allContexts = Array.prototype.slice.call(context), cIndex = -1, cLen = allContexts.length; while (++cIndex&lt;cLen) &#123; init.prepare.call(null, allContexts[cIndex]); &#125; return; &#125; // Slowly recurses through all elements // so as not to lock up on the user. context = context || document.documentElement; if (!document.createElement('canvas').getContext) &#123; return; &#125; var all = getAllNodes(context), i = -1, len = all.length; while (++i&lt;len) &#123; var cur = all[i]; if (data(cur).skip) &#123; return; &#125; if (cur.nodeName.toLowerCase() === 'img') &#123; if (cur.getAttribute('src') &amp;&amp; !isExternal(cur.src)) &#123; desatIMG(cur, true); &#125; &#125; else &#123; var style = getStyle(cur, 'backgroundImage'); if (style.indexOf('url(') &gt; -1) &#123; var urlPatt = /\\(['\"]?(.+?)['\"]?\\)/, url = style.match(urlPatt)[1]; if (!isExternal(url)) &#123; var temp = document.createElement('img'); temp.src = url; desatIMG(temp, true, cur); &#125; &#125; &#125; &#125; &#125;; return init;&#125;)();//然后调用 changeColor()即可生效 function changeColor()&#123; var navStr = navigator.userAgent.toLowerCase(); function isIe()&#123; return (\"ActiveXObject\" in window); &#125; var isIE1011=(navStr.indexOf(\"msie 10.0\")!==-1)||(navStr.indexOf(\"rv:11.0\")!==-1); if(isIE1011)&#123; // 判断是IE10或者IE11 grayscale(document.body); &#125; &#125;","tags":[{"name":"前端","slug":"前端","permalink":"http://jianwwpro.github.io/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://jianwwpro.github.io/tags/CSS/"}]},{"title":"nginx用法记录","date":"2016-09-07T01:26:50.000Z","path":"2016/09/07/nginx用法记录/","text":"uri匹配和if判断123456789101112131415161718server&#123; listen 91; location /mm&#123; proxy_pass http://localhost:7070; client_max_body_size 1000m; &#125; location ~* ^/resize &#123; if ( $uri ~* &quot;^/resize_(\\d+)x(\\d+)/(.*)&quot; ) &#123; set $image_path $3; proxy_pass http://127.0.0.1:91/$image_path; &#125; &#125; location /mm/userfiles &#123; root e:/mm/jsite/data; error_page 405 =200 @405; &#125;&#125; nginx加水印和切图存储 nginx自带http_image_filter_module，但是加水印的工作需要从githu上面下载模块替换原来自带模块编译安装。https://github.com/intaro/nginx-image-filter-watermark 编译: 1234yum install gd-devel--with-http_image_filter_module --with-http_stub_status_module --with-http_ssl_module --add-module=/application/nginx-rtmp-module --add-module=/root/Downloads/ngx_devel_kit-0.2.18/ --add-module=/root/Downloads/lua-nginx-module-0.8.6/ --add-module=/root/Downloads/echo-nginx-module-0.59rc1 --with-pcre=../pcre-8.30 --add-module=../set-misc-nginx-module-0.30/ 配置 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859server &#123; listen 82; server_name localhost; server_name ah.tunnel.qydev.com; location /mm&#123; proxy_pass http://localhost:7070; client_max_body_size 1000m; &#125; location /mm/static/f &#123; root /application/tomcat_mm/webapps; &#125;location ~* ^/resize &#123; ##### author : wangjianwu root /data/site_cache; set $width 150; set $height 100; set $dimens &quot;&quot;; if ($uri ~* &quot;^/resize_(\\d+)x(\\d+)/(.*)&quot; ) &#123; set $width $1; set $height $2; set $image_path $3; set $demins &quot;_$1x$2&quot;; &#125; if ($uri ~* &quot;^/resize/(.*)&quot; ) &#123; set $image_path $1; &#125; set $image_uri image_resize/$image_path?width=$width&amp;height=$height; if (!-f $request_filename) &#123; proxy_pass http://127.0.0.1:82/$image_uri; break; &#125; proxy_store /data/site_cache/resize$demins/$image_path; proxy_store_access user:rw group:rw all:r; proxy_set_header Host $host; expires 30d; access_log off; &#125; location /mm/userfiles &#123; root /data/jsite/data; error_page 405 =200 @405; &#125; location /image_resize &#123; alias /data/jsite/data; image_filter watermark; image_filter_watermark &quot;/data/jsite/1.png&quot;; image_filter_watermark_position bottom-right; image_filter resize $arg_width $arg_height; image_filter_jpeg_quality 95; image_filter_watermark_width_from 200; image_filter_watermark_height_from 200;image_filter_buffer 20M; access_log off; &#125;&#125;","tags":[{"name":"nginx","slug":"nginx","permalink":"http://jianwwpro.github.io/tags/nginx/"}]},{"title":"博客开通","date":"2016-08-04T00:30:02.000Z","path":"2016/08/04/博客开通/","text":"成长需要记录，需要沉淀。我的云笔记里已经放了各种分类的学习笔记、生活记录，但是我想将我自己能分享出来的记录都分享出来，为我们大家的搜索引擎贡献一点点的力量。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://jianwwpro.github.io/tags/随笔/"}]}]